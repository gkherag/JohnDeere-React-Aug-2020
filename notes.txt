RIA (Rich Internet Applications)

JavaScript

Data Types
    Number, String, Boolean, Object, Undefined & Function
Programming Constructs
    var, if else, for, while, switch case, try catch finally, throw, function
APIs
    Date, Array, Math, RegEx, timer (setTimeout, clearTimeout, setInterval, clearInterval), Error


Language Categories
    Line Oriented
    Procedural
    Object Based
    Object Oriented
    Functional
        functions are first class citizens
        functions can be treated like data (object)


    static
    dynamic

    strongly typed
    loosely typed




class Employee{
    public int id;
    public string name;
    public float salary;
}

Employee emp = new Employee();
emp.id = 200;
emp.city = 'Bangalore'



int x = 0;

x = "asfddaf"

var x ;

x = 100;
x = 'abc';
x = true;
x = {}
x = function(){}


arguments, this
arguments
    => array like object
        arguments[0]
        arguments[1]
        arguments.length

this 
    => invocation context

In JS, it doesnot matter who owns the function or where the function is
        what matters is how the function is invoked
    
Function invocation patterns
    As a method of an obj
        then this => obj

    As a function
        then this => global scope (window in the browser)

    Using the 'call' method of the function

    Using the 'apply' method of the function


Closures

    clickTracker.html
        Track [button]
        div

Closure - assignment

create an object and assign it to a variable called 'spinner'
    var spinner = /*.....*/

The spinner object must exhibit two methods
    up() 
    down()

the behavior of the methods should be as follows

spinner.up() => 1
spinner.up() => 2
spinner.up() => 3

spinner.down() => 2
spinner.down() => 1
spinner.down() => 0
spinner.down() => -1

There should be no way by which one can influence the outcome of the up or down methods

the following should NOT be possible

spinner.counter = 10000
spinner.up() => should NOT return 10001

OR

counter = 10000
spinner.up() => should NOT return 10001


function add(x,y){
    return x + y;
}